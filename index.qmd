---
title: "My Data Visualization Portfolio"
format: html
date: today
execute:
  echo: true
---

# Welcome to My Portfolio!

Hello! My nickname is Giteshk. This is my Quarto data visualization portfolio showcasing my Python and matplotlib skills.

## About This Portfolio

This portfolio demonstrates how Quarto can seamlessly integrate Python code and visualizations into professional documents. Each chart below is created using matplotlib and embedded directly into this document.

## What is Matplotlib?

Matplotlib is a comprehensive plotting library for Python that provides a powerful and flexible framework for creating static, animated, and interactive visualizations. Originally developed by John D. Hunter in 2003, matplotlib has become the de facto standard for data visualization in the Python ecosystem.

### Why Matplotlib is Useful:

- **Versatility**: Create a wide variety of plots including line plots, scatter plots, bar charts, histograms, heatmaps, and more
- **Publication Quality**: Generate high-resolution figures suitable for academic papers, presentations, and publications
- **Customization**: Extensive customization options for colors, fonts, styles, and layouts
- **Integration**: Seamlessly works with NumPy, Pandas, and other scientific Python libraries
- **Cross-Platform**: Works consistently across different operating systems and environments
- **Professional Output**: Export to multiple formats (PNG, PDF, SVG, etc.) with precise control over resolution and styling
- **Community Support**: Large, active community with extensive documentation and examples

```{python}
import matplotlib.pyplot as plt
import numpy as np

# Create sample data
x = np.linspace(0, 10, 100)
y = np.sin(x)

# Create the plot
plt.figure(figsize=(7, 4.75))
plt.plot(x, y, 'b-', linewidth=2, label='sin(x)')
plt.xlabel('X values')
plt.ylabel('Y values')
plt.title('My First Matplotlib Chart')
plt.grid(True, alpha=0.3)
plt.legend()
plt.show()
```

```{python}
# Sample data for bar chart
categories = ['A', 'B', 'C', 'D', 'E']
values = [23, 45, 56, 78, 32]
plt.figure(figsize=(7, 4.75))
bars = plt.bar(categories, values, color=['red', 'green', 'blue', 'orange', 'purple'])
plt.xlabel('Categories')
plt.ylabel('Values')
plt.title('Sample Bar Chart')

# Add value labels on bars
for bar, value in zip(bars, values):
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1,
             str(value), ha='center', va='bottom')
plt.show()
```

```{python}
# Scatter plot with random data points
import random

# Set seed for reproducible results
np.random.seed(42)
random.seed(42)

# Generate random data points
n_points = 100
x_scatter = np.random.normal(50, 15, n_points)
y_scatter = np.random.normal(50, 15, n_points)
colors = np.random.rand(n_points)
sizes = np.random.randint(20, 200, n_points)

plt.figure(figsize=(7, 4.75))
scatter = plt.scatter(x_scatter, y_scatter, c=colors, s=sizes, alpha=0.6, cmap='viridis')
plt.xlabel('X Values')
plt.ylabel('Y Values')
plt.title('Random Scatter Plot')
plt.colorbar(scatter, label='Color Scale')
plt.grid(True, alpha=0.3)
plt.show()
```

```{python}
# Pie chart with sample data
# Sample data for pie chart
labels = ['Python', 'JavaScript', 'Java', 'C++', 'R', 'Other']
sizes = [35, 20, 15, 12, 10, 8]
colors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#ff99cc', '#c2c2f0']
explode = (0.1, 0, 0, 0, 0, 0)  # explode the first slice (Python)

plt.figure(figsize=(7, 4.75))
wedges, texts, autotexts = plt.pie(sizes, explode=explode, labels=labels, colors=colors,
        autopct='%1.1f%%', shadow=True, startangle=90)
plt.title('Programming Language Popularity', fontsize=14, fontweight='bold')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle

# Customize the text properties
for autotext in autotexts:
    autotext.set_color('white')
    autotext.set_fontweight('bold')
    autotext.set_fontsize(10)

plt.show()
```

## Conclusion

This demonstrates how Quarto can seamlessly integrate Python code and visualizations into professional documents that can be hosted publicly on GitHub Pages!